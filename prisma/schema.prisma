generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String      @id @default(cuid()) @map("_id")
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String      @default("USER")
  bio           String?
  location      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relationships
  posts           KindnessPost[]
  comments        Comment[]
  votes           Vote[]
  receivedActs    ReceivedAct[]
  givenActs       GivenAct[]
  organizedEvents Event[]
  eventAttendance EventAttendee[]
  goals           Goal[]
  badges          UserBadge[]
}

model KindnessPost {
  id          String      @id @default(cuid()) @map("_id")
  title       String
  content     String
  type        String
  urgency     String
  location    String?
  isAnonymous Boolean     @default(false)
  status      String      @default("OPEN")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  votes       Vote[]
  tags        PostTag[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      KindnessPost @relation(fields: [postId], references: [id])
  postId    String
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String
}

model Vote {
  id        String   @id @default(cuid()) @map("_id")
  type      String
  createdAt DateTime @default(now())

  post      KindnessPost @relation(fields: [postId], references: [id])
  postId    String
  user      User         @relation(fields: [userId], references: [id])
  userId    String

  @@unique([postId, userId])
}

model Badge {
  id          String      @id @default(cuid()) @map("_id")
  name        String
  description String
  type        String
  createdAt   DateTime    @default(now())

  users       UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid()) @map("_id")
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  badge    Badge    @relation(fields: [badgeId], references: [id])
  badgeId  String

  @@unique([userId, badgeId])
}

model Tag {
  id          String      @id @default(cuid()) @map("_id")
  name        String      @unique
  description String?
  posts       PostTag[]
}

model PostTag {
  id       String         @id @default(cuid()) @map("_id")
  post     KindnessPost   @relation(fields: [postId], references: [id])
  postId   String
  tag      Tag            @relation(fields: [tagId], references: [id])
  tagId    String

  @@unique([postId, tagId])
}

model ReceivedAct {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())

  receiver  User     @relation(fields: [userId], references: [id])
  userId    String
}

model GivenAct {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())

  giver     User     @relation(fields: [userId], references: [id])
  userId    String
}

model Event {
  id          String      @id @default(cuid()) @map("_id")
  title       String
  description String
  date        DateTime
  location    String?
  capacity    Int?
  isVirtual   Boolean     @default(false)
  status      String      @default("UPCOMING")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  organizer   User        @relation(fields: [organizerId], references: [id])
  organizerId String
  attendees   EventAttendee[]
}

model EventAttendee {
  id        String   @id @default(cuid()) @map("_id")
  status    String   @default("REGISTERED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([eventId, userId])
}

model Goal {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String
  target      Int
  progress    Int      @default(0)
  deadline    DateTime?
  status      String   @default("IN_PROGRESS")
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  userId      String
}
