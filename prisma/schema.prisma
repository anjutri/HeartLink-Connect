generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  bio           String?
  location      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  posts         KindnessPost[]
  comments      Comment[]
  votes         Vote[]
  badges        Badge[]
  receivedActs  ReceivedAct[]
  givenActs     GivenAct[]
}

model KindnessPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        String   // e.g., "Physical Help", "Emotional Support"
  urgency     String   // "Low", "Medium", "High"
  location    String?
  isAnonymous Boolean  @default(false)
  status      String   @default("OPEN") // "OPEN", "IN_PROGRESS", "COMPLETED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  votes       Vote[]
  tags        Tag[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  post      KindnessPost @relation(fields: [postId], references: [id])
  postId    String
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
}

model Vote {
  id        String   @id @default(cuid())
  type      String   // "UPVOTE" or "DOWNVOTE"
  createdAt DateTime @default(now())

  // Relationships
  post      KindnessPost @relation(fields: [postId], references: [id])
  postId    String
  user      User        @relation(fields: [userId], references: [id])
  userId    String

  @@unique([postId, userId])
}

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  posts       KindnessPost[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // "ACHIEVEMENT", "MILESTONE", etc.
  createdAt   DateTime @default(now())

  // Relationships
  users       User[]
}

model ReceivedAct {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relationships
  receiver  User     @relation(fields: [userId], references: [id])
  userId    String
}

model GivenAct {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relationships
  giver     User     @relation(fields: [userId], references: [id])
  userId    String
} 